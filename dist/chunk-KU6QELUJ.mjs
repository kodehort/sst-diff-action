import{b as C,c as E,d as m}from"./chunk-ISPMX3VH.mjs";import{a as w,c as b}from"./chunk-7S7IXY6P.mjs";var A=b(i=>{Object.defineProperty(i,"__esModule",{value:!0});i.Settings=i.Context=i.Configuration=i.Command=i.TRANSIENT_CONTEXT_KEY=i.USER_DEFAULTS=i.PROJECT_CONTEXT=i.PROJECT_CONFIG=void 0;var O=w("os"),p=w("path"),h=C(),a=E(),l=m();i.PROJECT_CONFIG="cdk.json";i.PROJECT_CONTEXT="cdk.context.json";i.USER_DEFAULTS="~/.cdk.json";i.TRANSIENT_CONTEXT_KEY="$dontSaveContext";var g="context",u;(function(n){n.LS="ls",n.LIST="list",n.DIFF="diff",n.BOOTSTRAP="bootstrap",n.DEPLOY="deploy",n.DESTROY="destroy",n.SYNTHESIZE="synthesize",n.SYNTH="synth",n.METADATA="metadata",n.INIT="init",n.VERSION="version",n.WATCH="watch"})(u=i.Command||(i.Command={}));var x=[u.DEPLOY,u.DIFF,u.SYNTH,u.SYNTHESIZE,u.WATCH],y=class{constructor(t={}){this.props=t,this.settings=new r,this.context=new d,this.defaultConfig=new r({versionReporting:!0,pathMetadata:!0,output:"cdk.out"}),this.loaded=!1,this.commandLineArguments=t.commandLineArguments?r.fromCommandLineArguments(t.commandLineArguments):new r,this.commandLineContext=this.commandLineArguments.subSettings([g]).makeReadOnly()}get projectConfig(){if(!this._projectConfig)throw new Error("#load has not been called yet!");return this._projectConfig}get projectContext(){if(!this._projectContext)throw new Error("#load has not been called yet!");return this._projectContext}async load(){let t=await f(i.USER_DEFAULTS);this._projectConfig=await f(i.PROJECT_CONFIG),this._projectContext=await f(i.PROJECT_CONTEXT);let e=this.props.readUserContext??!0;if(t.get(["build"]))throw new Error("The `build` key cannot be specified in the user config (~/.cdk.json), specify it in the project config (cdk.json) instead");let s=[this.commandLineContext,this.projectConfig.subSettings([g]).makeReadOnly(),this.projectContext];return e&&s.push(t.subSettings([g]).makeReadOnly()),this.context=new d(...s),this.settings=this.defaultConfig.merge(t).merge(this.projectConfig).merge(this.commandLineArguments).makeReadOnly(),a.debug("merged settings:",this.settings.all),this.loaded=!0,this}async saveContext(){return this.loaded?(await this.projectContext.save(i.PROJECT_CONTEXT),this):this}};i.Configuration=y;async function f(n){let t=new r;return await t.load(n),t.empty||a.debug(n+":",JSON.stringify(t.all,void 0,2)),t}var d=class{constructor(...t){this.bags=t.length>0?t:[new r]}get keys(){return Object.keys(this.all)}has(t){return this.keys.indexOf(t)>-1}get all(){let t=new r;for(let e of[...this.bags].reverse())t=t.merge(e);return t.all}get(t){for(let e of this.bags){let s=e.get([t]);if(s!==void 0)return s}}set(t,e){for(let s of this.bags)s.readOnly||(s.set([t],e),e=void 0)}unset(t){this.set(t,void 0)}clear(){for(let t of this.keys)this.unset(t)}};i.Context=d;var r=class{constructor(t={},e=!1){this.settings=t,this.readOnly=e}static fromCommandLineArguments(t){let e=this.parseStringContextListToObject(t),s=this.parseStringTagsListToObject(j(t.tags)),o;return x.includes(t._[0])?o=t.exclusively?t.STACKS??["**"]:["**"]:o=[],new r({app:t.app,browser:t.browser,build:t.build,context:e,debug:t.debug,tags:s,language:t.language,pathMetadata:t.pathMetadata,assetMetadata:t.assetMetadata,profile:t.profile,plugin:t.plugin,requireApproval:t.requireApproval,toolkitStackName:t.toolkitStackName,toolkitBucket:{bucketName:t.bootstrapBucketName,kmsKeyId:t.bootstrapKmsKeyId},versionReporting:t.versionReporting,staging:t.staging,output:t.output,outputsFile:t.outputsFile,progress:t.progress,bundlingStacks:o,lookups:t.lookups,rollback:t.rollback,notices:t.notices,assetParallelism:t["asset-parallelism"],assetPrebuild:t["asset-prebuild"]})}static mergeAll(...t){let e=new r;for(let s of t)e=e.merge(s);return e}static parseStringContextListToObject(t){let e={};for(let s of t.context||[]){let o=s.split(/=(.*)/,2);if(o.length===2){if(a.debug("CLI argument context: %s=%s",o[0],o[1]),o[0].match(/^aws:.+/))throw new Error(`User-provided context cannot use keys prefixed with 'aws:', but ${o[0]} was provided.`);e[o[0]]=o[1]}else a.warning("Context argument is not an assignment (key=value): %s",s)}return e}static parseStringTagsListToObject(t){if(t===void 0||t.length===0)return;let e=t.filter(o=>o!=="");if(e.length===0)return[];let s=[];for(let o of e){let c=o.split("=",2);c.length===2?(a.debug("CLI argument tags: %s=%s",c[0],c[1]),s.push({Key:c[0],Value:c[1]})):a.warning("Tags argument is not an assignment (key=value): %s",o)}return s.length>0?s:void 0}async load(t){if(this.readOnly)throw new Error(`Can't load ${t}: settings object is readonly`);this.settings={};let e=T(t);return await h.pathExists(e)&&(this.settings=await h.readJson(e)),this.prohibitContextKey("default-account",t),this.prohibitContextKey("default-region",t),this.warnAboutContextKey("aws:",t),this}async save(t){let e=T(t);return await h.writeJson(e,k(this.settings),{spaces:2}),this}get all(){return this.get([])}merge(t){return new r(l.deepMerge(this.settings,t.settings))}subSettings(t){return new r(this.get(t)||{},!1)}makeReadOnly(){return new r(this.settings,!0)}clear(){if(this.readOnly)throw new Error("Cannot clear(): settings are readonly");this.settings={}}get empty(){return Object.keys(this.settings).length===0}get(t){return l.deepClone(l.deepGet(this.settings,t))}set(t,e){if(this.readOnly)throw new Error(`Can't set ${t}: settings object is readonly`);return t.length===0?this.settings=e:l.deepSet(this.settings,t,e),this}unset(t){this.set(t,void 0)}prohibitContextKey(t,e){if(this.settings.context&&t in this.settings.context)throw new Error(`The 'context.${t}' key was found in ${p.resolve(e)}, but it is no longer supported. Please remove it.`)}warnAboutContextKey(t,e){if(this.settings.context)for(let s of Object.keys(this.settings.context))s.startsWith(t)&&a.warning(`A reserved context key ('context.${t}') key was found in ${p.resolve(e)}, it might cause surprising behavior and should be removed.`)}};i.Settings=r;function T(n){return n.startsWith("~")?p.join(O.homedir(),n.slice(1)):n}function k(n){let t={};for(let[e,s]of Object.entries(n))S(s)||(t[e]=s);return t}function S(n){return typeof n=="object"&&n!==null&&n[i.TRANSIENT_CONTEXT_KEY]}function j(n){if(n===void 0)return;if(!Array.isArray(n))throw new Error(`Expected array, got '${n}'`);let t=n.filter(e=>typeof e!="string");if(t.length>0)throw new Error(`Expected list of strings, found ${t}`);return n}});export{A as a};
